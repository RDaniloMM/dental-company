-- ============================================================
-- Esquema Supabase Mejorado - Clínica Odontológica (5NF)
-- Incluye tablas adicionales para cumplimiento normativo.
-- ============================================================

-- 1) Extensiones necesarias
create extension if not exists pgcrypto;
create extension if not exists "uuid-ossp";
create extension if not exists pg_trgm;
create extension if not exists btree_gin;
create extension if not exists btree_gist;
create extension if not exists vector; -- para embeddings (RAG)

-- 2) Función utilitaria para updated_at
create or replace function public.set_updated_at()
returns trigger
language plpgsql
as $$
begin
  new.updated_at = now();
  return new;
end;
$$;

-- Función utilitaria para crear triggers idempotentes de updated_at
create or replace function public.ensure_updated_trigger(p_schema text, p_table text, p_trigger text)
returns void
language plpgsql
as $$
begin
  if not exists (
    select 1
    from pg_trigger t
    join pg_class c on c.oid = t.tgrelid
    join pg_namespace n on n.oid = c.relnamespace
    where t.tgname = p_trigger
      and n.nspname = p_schema
      and c.relname = p_table
  ) then
    execute format('create trigger %I before update on %I.%I for each row execute function public.set_updated_at()', p_trigger, p_schema, p_table);
  end if;
end;
$$;

-- ============================================================
-- 3) Tipos y enums
-- ============================================================
do $$
begin
  if not exists (select 1 from pg_type where typname = 'rol_personal') then
    create type rol_personal as enum ('admin','odontologo','asistente','caja','bi','recepcion');
  end if;
end$$;

do $$
begin
  if not exists (select 1 from pg_type where typname = 'sexo') then
    create type sexo as enum ('masculino','femenino','otro','no_especifica');
  end if;
end$$;

do $$
begin
  if not exists (select 1 from pg_type where typname = 'estado_cita') then
    create type estado_cita as enum ('programada','confirmada','completada','cancelada','no_asistio','reprogramada');
  end if;
end$$;

do $$
begin
  if not exists (select 1 from pg_type where typname = 'tipo_transaccion') then
    create type tipo_transaccion as enum ('ingreso','egreso');
  end if;
end$$;

do $$
begin
  if not exists (select 1 from pg_type where typname = 'metodo_pago') then
    create type metodo_pago as enum ('efectivo','tarjeta','transferencia','yape','plin','otros');
  end if;
end$$;

do $$
begin
  if not exists (select 1 from pg_type where typname = 'estado_plan_item') then
    create type estado_plan_item as enum ('planificado','en_proceso','completado','cancelado');
  end if;
end$$;

-- ============================================================
-- 4) Catálogos y bases
-- ============================================================

-- Monedas
create table if not exists public.moneda (
  id uuid primary key default gen_random_uuid(),
  codigo varchar(3) not null unique, -- e.g., 'PEN','USD'
  nombre text not null,
  simbolo text not null,
  es_predeterminada boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  check (char_length(codigo) = 3)
);
do $$ begin perform public.ensure_updated_trigger('public','moneda','t_moneda_updated'); end $$;

-- Sedes / Recursos físicos (sillas, boxes, salas)
create table if not exists public.sede (
  id uuid primary key default gen_random_uuid(),
  nombre text not null,
  direccion text,
  telefono text,
  activo boolean not null default true,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);
do $$ begin perform public.ensure_updated_trigger('public','sede','t_sede_updated'); end $$;

create table if not exists public.recurso_calendario (
  id uuid primary key default gen_random_uuid(),
  sede_id uuid not null references public.sede(id) on delete restrict,
  nombre text not null, -- p.ej. "Box 1" / "Sillón 2"
  tipo text not null, -- libre (no enum para flexibilidad)
  activo boolean not null default true,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  unique(sede_id, nombre)
);
do $$ begin perform public.ensure_updated_trigger('public','recurso_calendario','t_recurso_calendario_updated'); end $$;

-- Especialidades
create table if not exists public.especialidad (
  id uuid primary key default gen_random_uuid(),
  nombre text not null unique,
  descripcion text,
  activo boolean not null default true,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);
do $$ begin perform public.ensure_updated_trigger('public','especialidad','t_especialidad_updated'); end $$;

-- Catálogo de procedimientos y diagnósticos
create table if not exists public.procedimiento_catalogo (
  id uuid primary key default gen_random_uuid(),
  codigo text not null unique, -- código interno/estándar
  nombre text not null,
  especialidad_id uuid references public.especialidad(id) on delete set null,
  duracion_minutos int not null default 30,
  precio_base numeric(12,2) not null default 0,
  activo boolean not null default true,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);
do $$ begin perform public.ensure_updated_trigger('public','procedimiento_catalogo','t_procedimiento_catalogo_updated'); end $$;

create table if not exists public.diagnostico_catalogo (
  id uuid primary key default gen_random_uuid(),
  codigo text not null unique, -- p.ej. ICD-10 o propio
  nombre text not null,
  descripcion text,
  activo boolean not null default true,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);
do $$ begin perform public.ensure_updated_trigger('public','diagnostico_catalogo','t_diagnostico_catalogo_updated'); end $$;

-- Odontograma: dientes, superficies y condiciones
create table if not exists public.diente_catalogo (
  id uuid primary key default gen_random_uuid(),
  codigo_fdi text not null unique, -- p.ej. "11","12",... "48","51"... "85"
  es_permanente boolean not null,
  nombre text not null, -- p.ej. "Incisivo central superior derecho"
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);
do $$ begin perform public.ensure_updated_trigger('public','diente_catalogo','t_diente_catalogo_updated'); end $$;

create table if not exists public.superficie_dental_catalogo (
  id uuid primary key default gen_random_uuid(),
  codigo text not null unique, -- "O","M","D","L","V"...
  nombre text not null, -- "Oclusal","Mesial", etc.
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);
do $$ begin perform public.ensure_updated_trigger('public','superficie_dental_catalogo','t_superficie_dental_catalogo_updated'); end $$;

create table if not exists public.condicion_dental_catalogo (
  id uuid primary key default gen_random_uuid(),
  codigo text not null unique, -- p.ej. "caries","ausente","restaurado"
  nombre text not null,
  descripcion text,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);
do $$ begin perform public.ensure_updated_trigger('public','condicion_dental_catalogo','t_condicion_dental_catalogo_updated'); end $$;

-- ============================================================
-- 5) Personal (vinculado a Supabase Auth)
-- ============================================================
create table if not exists public.personal (
  id uuid primary key default gen_random_uuid(),
  user_id uuid not null unique references auth.users(id) on delete cascade,
  rol rol_personal not null,
  nombres text not null,
  apellidos text not null,
  email text not null,
  telefono text,
  especialidad_id uuid references public.especialidad(id) on delete set null,
  activo boolean not null default true,
  sede_id uuid references public.sede(id) on delete set null,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  unique (email)
);
create index if not exists idx_personal_sede on public.personal(sede_id);
do $$ begin perform public.ensure_updated_trigger('public','personal','t_personal_updated'); end $$;

-- Credenciales Google para agenda (solo providers/odontólogos)
create table if not exists public.credencial_google (
  id uuid primary key default gen_random_uuid(),
  personal_id uuid not null references public.personal(id) on delete cascade,
  refresh_token text not null,
  access_token text,
  access_token_expira_en timestamptz,
  scope text,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  unique(personal_id)
);
do $$ begin perform public.ensure_updated_trigger('public','credencial_google','t_credencial_google_updated'); end $$;

-- ============================================================
-- 6) Pacientes (5NF con contactos y direcciones separadas)
-- ============================================================
create table if not exists public.paciente (
  id uuid primary key default gen_random_uuid(),
  tipo_documento text, -- DNI/CE/PAS
  numero_documento text,
  nombres text not null,
  apellidos text not null,
  sexo sexo not null default 'no_especifica',
  fecha_nacimiento date,
  ocupacion text,
  estado_civil text,
  aseguradora text,
  codigo_asegurado text,
  observaciones text,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  unique (tipo_documento, numero_documento)
);
create index if not exists idx_paciente_trgm_nombre on public.paciente using gin ((nombres || ' ' || apellidos) gin_trgm_ops);
do $$ begin perform public.ensure_updated_trigger('public','paciente','t_paciente_updated'); end $$;

create table if not exists public.paciente_contacto (
  id uuid primary key default gen_random_uuid(),
  paciente_id uuid not null references public.paciente(id) on delete cascade,
  tipo text not null, -- 'email','telefono','emergencia'
  valor text not null,
  es_principal boolean not null default false,
  created_at timestamptz not null default now(),
  unique(paciente_id, tipo, valor)
);

create table if not exists public.paciente_direccion (
  id uuid primary key default gen_random_uuid(),
  paciente_id uuid not null references public.paciente(id) on delete cascade,
  direccion text not null,
  distrito text,
  provincia text,
  region text,
  pais text default 'Perú',
  es_principal boolean not null default true,
  created_at timestamptz not null default now()
);

-- Archivos adjuntos administrativos de paciente (no clínicos)
create table if not exists public.paciente_documento (
  id uuid primary key default gen_random_uuid(),
  paciente_id uuid not null references public.paciente(id) on delete cascade,
  tipo text not null, -- 'consentimiento','dni','otros'
  storage_path text not null, -- referencia Supabase Storage
  mime_type text,
  notas text,
  created_at timestamptz not null default now()
);

-- ============================================================
-- 7) Agenda y Citas
-- ============================================================
create table if not exists public.cita (
  id uuid primary key default gen_random_uuid(),
  paciente_id uuid not null references public.paciente(id) on delete restrict,
  profesional_id uuid not null references public.personal(id) on delete restrict,
  recurso_id uuid references public.recurso_calendario(id) on delete set null,
  inicio timestamptz not null,
  fin timestamptz not null,
  estado estado_cita not null default 'programada',
  motivo text,
  notas text,
  fuente text, -- 'web','telefono','referido'
  google_event_id text,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  check (fin > inicio)
);
create index if not exists idx_cita_profesional_fecha on public.cita (profesional_id, inicio);
create index if not exists idx_cita_paciente_fecha on public.cita (paciente_id, inicio);
do $$ begin perform public.ensure_updated_trigger('public','cita','t_cita_updated'); end $$;

-- Recordatorios y fidelidad (envíos programados)
create table if not exists public.recordatorio_cita (
  id uuid primary key default gen_random_uuid(),
  cita_id uuid not null references public.cita(id) on delete cascade,
  canal text not null, -- 'email','sms','whatsapp'
  programado_para timestamptz not null,
  enviado_en timestamptz,
  estado text not null default 'pendiente', -- 'pendiente','enviado','fallido'
  detalle_error text,
  created_at timestamptz not null default now()
);
create index if not exists idx_recordatorio_programado on public.recordatorio_cita (programado_para);

-- ============================================================
-- 8) Plan de tratamiento y Servicios
-- ============================================================
create table if not exists public.plan_tratamiento (
  id uuid primary key default gen_random_uuid(),
  paciente_id uuid not null references public.paciente(id) on delete restrict,
  creado_por uuid not null references public.personal(id) on delete restrict,
  moneda_id uuid not null references public.moneda(id) on delete restrict,
  descuento_porcentaje numeric(5,2) not null default 0,
  notas text,
  estado text not null default 'activo', -- 'activo','cerrado','cancelado'
  total_estimado numeric(12,2) not null default 0,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);
create index if not exists idx_plan_paciente on public.plan_tratamiento(paciente_id);
do $$ begin perform public.ensure_updated_trigger('public','plan_tratamiento','t_plan_tratamiento_updated'); end $$;

create table if not exists public.plan_tratamiento_item (
  id uuid primary key default gen_random_uuid(),
  plan_id uuid not null references public.plan_tratamiento(id) on delete cascade,
  procedimiento_id uuid not null references public.procedimiento_catalogo(id) on delete restrict,
  diente_id uuid references public.diente_catalogo(id) on delete set null,
  superficie_id uuid references public.superficie_dental_catalogo(id) on delete set null,
  cantidad int not null default 1,
  precio_unitario numeric(12,2) not null,
  estado estado_plan_item not null default 'planificado',
  realizado_por uuid references public.personal(id) on delete set null,
  realizado_en timestamptz,
  notas text,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  check (cantidad > 0),
  check (precio_unitario >= 0)
);
create index if not exists idx_plan_item_plan on public.plan_tratamiento_item(plan_id);
create index if not exists idx_plan_item_estado on public.plan_tratamiento_item(estado);
do $$ begin perform public.ensure_updated_trigger('public','plan_tratamiento_item','t_plan_tratamiento_item_updated'); end $$;

-- ============================================================
-- 9) Módulo Financiero (Caja, transacciones y documentos)
-- ============================================================
create table if not exists public.caja (
  id uuid primary key default gen_random_uuid(),
  sede_id uuid not null references public.sede(id) on delete restrict,
  fecha date not null,
  abierto_por uuid not null references public.personal(id) on delete restrict,
  cerrado_por uuid references public.personal(id) on delete set null,
  hora_apertura timestamptz not null default now(),
  hora_cierre timestamptz,
  saldo_inicial numeric(12,2) not null default 0,
  saldo_final numeric(12,2),
  estado text not null default 'abierta', -- 'abierta','cerrada'
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  unique (sede_id, fecha)
);
create index if not exists idx_caja_sede_fecha on public.caja(sede_id, fecha);
do $$ begin perform public.ensure_updated_trigger('public','caja','t_caja_updated'); end $$;

create table if not exists public.transaccion (
  id uuid primary key default gen_random_uuid(),
  caja_id uuid references public.caja(id) on delete set null,
  tipo tipo_transaccion not null,
  paciente_id uuid references public.paciente(id) on delete set null,
  relacionado_item_id uuid references public.plan_tratamiento_item(id) on delete set null,
  moneda_id uuid not null references public.moneda(id) on delete restrict,
  metodo metodo_pago not null,
  monto numeric(12,2) not null check (monto >= 0),
  descripcion text,
  realizado_por uuid not null references public.personal(id) on delete restrict,
  realizado_en timestamptz not null default now(),
  created_at timestamptz not null default now()
);
create index if not exists idx_transaccion_fecha on public.transaccion(realizado_en);
create index if not exists idx_transaccion_tipo on public.transaccion(tipo);

-- Documentos de venta (boleta/factura) y sus ítems
create table if not exists public.documento_venta (
  id uuid primary key default gen_random_uuid(),
  paciente_id uuid not null references public.paciente(id) on delete restrict,
  moneda_id uuid not null references public.moneda(id) on delete restrict,
  tipo text not null, -- 'boleta','factura','recibo'
  serie text not null,
  numero text not null,
  subtotal numeric(12,2) not null default 0,
  igv numeric(12,2) not null default 0,
  total numeric(12,2) not null default 0,
  estado text not null default 'emitido', -- 'emitido','anulado'
  emitido_en timestamptz not null default now(),
  creado_por uuid not null references public.personal(id) on delete restrict,
  unique (tipo, serie, numero)
);

create table if not exists public.documento_venta_item (
  id uuid primary key default gen_random_uuid(),
  documento_id uuid not null references public.documento_venta(id) on delete cascade,
  plan_item_id uuid references public.plan_tratamiento_item(id) on delete set null,
  descripcion text not null,
  cantidad int not null check (cantidad > 0),
  precio_unitario numeric(12,2) not null check (precio_unitario >= 0),
  total_linea numeric(12,2) not null check (total_linea >= 0)
);
create index if not exists idx_doc_item_doc on public.documento_venta_item(documento_id);

-- ============================================================
-- 10) Historia Clínica y Atenciones
-- ============================================================
-- Encuentro clínico por cita (acto médico)
create table if not exists public.encuentro_clinico (
  id uuid primary key default gen_random_uuid(),
  cita_id uuid unique references public.cita(id) on delete set null,
  paciente_id uuid not null references public.paciente(id) on delete restrict,
  profesional_id uuid not null references public.personal(id) on delete restrict,
  motivo_consulta text,
  anamnesis text,
  signos_vitales jsonb, -- opcional: {pa, fc, fr, temp}
  creado_en timestamptz not null default now(),
  creado_por uuid not null references public.personal(id) on delete restrict
);
create index if not exists idx_encuentro_paciente_fecha on public.encuentro_clinico(paciente_id, creado_en);

create table if not exists public.nota_progreso (
  id uuid primary key default gen_random_uuid(),
  encuentro_id uuid not null references public.encuentro_clinico(id) on delete cascade,
  autor_id uuid not null references public.personal(id) on delete restrict,
  texto text not null,
  creado_en timestamptz not null default now()
);
create index if not exists idx_nota_encuentro on public.nota_progreso(encuentro_id);

-- Diagnósticos por encuentro (N:N)
create table if not exists public.encuentro_diagnostico (
  encuentro_id uuid not null references public.encuentro_clinico(id) on delete cascade,
  diagnostico_id uuid not null references public.diagnostico_catalogo(id) on delete restrict,
  es_principal boolean not null default false,
  notas text,
  primary key (encuentro_id, diagnostico_id)
);

-- Procedimientos realizados en el encuentro
create table if not exists public.encuentro_procedimiento (
  id uuid primary key default gen_random_uuid(),
  encuentro_id uuid not null references public.encuentro_clinico(id) on delete cascade,
  plan_item_id uuid references public.plan_tratamiento_item(id) on delete set null,
  procedimiento_id uuid not null references public.procedimiento_catalogo(id) on delete restrict,
  diente_id uuid references public.diente_catalogo(id) on delete set null,
  superficie_id uuid references public.superficie_dental_catalogo(id) on delete set null,
  realizado_por uuid not null references public.personal(id) on delete restrict,
  realizado_en timestamptz not null default now(),
  notas text
);
create index if not exists idx_enc_proc_encuentro on public.encuentro_procedimiento(encuentro_id);

-- Ficha odontológica (datos estructurados, antecedentes, etc.)
create table if not exists public.ficha_odontologica (
  id uuid primary key default gen_random_uuid(),
  paciente_id uuid not null unique references public.paciente(id) on delete cascade,
  antecedentes_personales jsonb, -- normalizado por tipo/valor si se requiere más 5NF
  antecedentes_familiares jsonb,
  examen_extraoral jsonb,
  examen_intraoral jsonb,
  habitos jsonb, -- bruxismo, tabaquismo, etc.
  alergias jsonb,
  seguimiento jsonb, -- Para guardar la tabla de seguimiento
  ultima_actualizacion timestamptz not null default now()
);

-- Odontograma
create table if not exists public.odontograma (
  id uuid primary key default gen_random_uuid(),
  paciente_id uuid not null references public.paciente(id) on delete cascade,
  creado_por uuid not null references public.personal(id) on delete restrict,
  creado_en timestamptz not null default now()
);
create index if not exists idx_odontograma_paciente_fecha on public.odontograma(paciente_id, creado_en);

create table if not exists public.odontograma_diente_estado (
  id uuid primary key default gen_random_uuid(),
  odontograma_id uuid not null references public.odontograma(id) on delete cascade,
  diente_id uuid not null references public.diente_catalogo(id) on delete restrict,
  condicion_id uuid not null references public.condicion_dental_catalogo(id) on delete restrict,
  notas text,
  unique (odontograma_id, diente_id, condicion_id)
);
create index if not exists idx_odo_diente on public.odontograma_diente_estado(odontograma_id, diente_id);

create table if not exists public.odontograma_superficie_estado (
  id uuid primary key default gen_random_uuid(),
  odontograma_id uuid not null references public.odontograma(id) on delete cascade,
  diente_id uuid not null references public.diente_catalogo(id) on delete restrict,
  superficie_id uuid not null references public.superficie_dental_catalogo(id) on delete restrict,
  condicion_id uuid not null references public.condicion_dental_catalogo(id) on delete restrict,
  notas text,
  unique (odontograma_id, diente_id, superficie_id, condicion_id)
);
create index if not exists idx_odo_superficie on public.odontograma_superficie_estado(odontograma_id, diente_id, superficie_id);

-- ============================================================
-- 11) Imágenes Clínicas (Storage)
-- ============================================================
create table if not exists public.activo_multimedia (
  id uuid primary key default gen_random_uuid(),
  paciente_id uuid not null references public.paciente(id) on delete cascade,
  encuentro_id uuid references public.encuentro_clinico(id) on delete set null,
  tipo text not null, -- 'radiografia','fotografia','documento'
  storage_path text not null, -- referencia en Supabase Storage
  mime_type text,
  tomado_en timestamptz,
  descripcion text,
  creado_por uuid references public.personal(id) on delete set null,
  created_at timestamptz not null default now()
);
create index if not exists idx_media_paciente_fecha on public.activo_multimedia(paciente_id, created_at);

-- ============================================================
-- 12) Chatbot / RAG (Documentos, Chunks, Embeddings)
-- ============================================================
create table if not exists public.ai_fuente (
  id uuid primary key default gen_random_uuid(),
  nombre text not null unique,
  descripcion text,
  created_at timestamptz not null default now()
);

create table if not exists public.ai_documento (
  id uuid primary key default gen_random_uuid(),
  fuente_id uuid references public.ai_fuente(id) on delete set null,
  titulo text,
  url text,
  contenido text, -- opcional, para auditoría
  metadata jsonb,
  created_at timestamptz not null default now()
);

-- Usa vector(1536) o el tamaño que corresponda
create table if not exists public.ai_fragmento (
  id uuid primary key default gen_random_uuid(),
  documento_id uuid not null references public.ai_documento(id) on delete cascade,
  contenido text not null,
  embedding vector(1536) not null,
  metadata jsonb,
  created_at timestamptz not null default now()
);
create index if not exists idx_ai_fragmento_embedding on public.ai_fragmento using ivfflat (embedding vector_cosine_ops) with (lists = 100);

create table if not exists public.ai_traza (
  id uuid primary key default gen_random_uuid(),
  usuario_id uuid references auth.users(id) on delete set null,
  pregunta text not null,
  respuesta text,
  relacionados jsonb, -- ids de fragmentos recuperados
  creado_en timestamptz not null default now()
);
create index if not exists idx_ai_traza_fecha on public.ai_traza(creado_en);

-- ============================================================
-- 13) Vistas / KPIs
-- ============================================================
create materialized view if not exists public.kpi_ingresos_mensuales as
select
  date_trunc('month', t.realizado_en) as mes,
  m.codigo as moneda,
  sum(case when t.tipo = 'ingreso' then t.monto else -t.monto end) as total
from public.transaccion t
join public.moneda m on m.id = t.moneda_id
group by 1,2;
create index if not exists idx_kpi_ingresos_mensuales_mes on public.kpi_ingresos_mensuales(mes);

-- ============================================================
-- 14) Índices adicionales
-- ============================================================
create index if not exists idx_personal_rol on public.personal(rol);
create index if not exists idx_cita_estado on public.cita(estado);
create index if not exists idx_plan_item_procedimiento on public.plan_tratamiento_item(procedimiento_id);
create index if not exists idx_encuentro_profesional_fecha on public.encuentro_clinico(profesional_id, creado_en);
create index if not exists idx_media_encuentro on public.activo_multimedia(encuentro_id);

-- ============================================================
-- 15) Notas sobre RLS (pendiente configurar políticas)
-- ============================================================

-- ============================================================
-- MEJORAS PARA CUMPLIMIENTO 100% (Añadir al final)
-- ============================================================

-- Consentimientos informados
create table if not exists public.consentimiento_informado (
  id uuid primary key default gen_random_uuid(),
  paciente_id uuid not null references public.paciente(id) on delete cascade,
  procedimiento_id uuid references public.procedimiento_catalogo(id) on delete set null,
  fecha timestamptz not null default now(),
  firmado_por_paciente boolean not null default false,
  firmado_por_profesional boolean not null default false,
  archivo_path text, -- opcional: PDF en Supabase Storage
  notas text
);

-- Prescripción médica
create table if not exists public.receta (
  id uuid primary key default gen_random_uuid(),
  encuentro_id uuid not null references public.encuentro_clinico(id) on delete cascade,
  medicamento text not null,
  dosis text,
  frecuencia text,
  duracion text,
  indicaciones text,
  creado_en timestamptz not null default now(),
  creado_por uuid not null references public.personal(id) on delete restrict
);
